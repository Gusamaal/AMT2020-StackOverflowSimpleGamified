package ch.heigvd.amt.project.infrastructure.persistence;

import ch.heigvd.amt.project.domain.IEntity;
import ch.heigvd.amt.project.domain.IRepository;
import ch.heigvd.amt.project.domain.Id;

import javax.swing.text.html.parser.Entity;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

public abstract class InMemoryRepository<ENTITY extends IEntity<ENTITY,ID>,ID extends Id> implements IRepository<ENTITY,Id> {

    private Map<Id, ENTITY> store = new ConcurrentHashMap<>(); // used to be our old fakeDataBase, is now a store and a concurrentHashMap


    @Override
    public int hashCode() {
        return super.hashCode(); //auto generated by intellij
    }

    @Override
    public boolean equals(Object obj) {
        return super.equals(obj); //auto generated by intellij
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone(); //auto generated by intellij
    }

    @Override
    public String toString() {
        return super.toString(); //auto generated by intellij
    }

    @Override
    public void save(ENTITY entity) {
        entity.getId();
        store.put(entity.getId(),entity);
    }

    @Override
    public void remove(Id id) {
        store.remove(id);
    }

    @Override
    public Optional<ENTITY> findById(Id id) {
        ENTITY existingEntity = store.get(id);
        if(existingEntity == null){
            return Optional.empty();
        }
        ENTITY clonedEntity = existingEntity.deepClone();
        return Optional.of(clonedEntity);
    }

    @Override
    public Collection<ENTITY> findAll() {
        return store.values().stream().map(entity -> entity.deepClone()).collect(Collectors.toList());
    }
}
